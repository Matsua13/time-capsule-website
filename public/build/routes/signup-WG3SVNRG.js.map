{
  "version": 3,
  "sources": ["empty-module:~/utils/email.server", "../../../app/routes/signup.tsx"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/signup.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/signup.tsx\");\n  import.meta.hot.lastModified = \"1740143140356.773\";\n}\n// REMIX HMR END\n\n// app/routes/signup.tsx\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData, Link } from \"@remix-run/react\";\nimport bcrypt from \"bcryptjs\";\nimport { db } from \"~/utils/db.server\";\n// Importation de sendConfirmationEmail depuis email.server.ts\nimport { sendConfirmationEmail } from \"~/utils/email.server\";\nimport { randomUUID } from \"crypto\";\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const username = formData.get(\"username\");\n  if (typeof email !== \"string\" || typeof password !== \"string\" || typeof username !== \"string\" || !email || !password || !username) {\n    return json({\n      error: \"Please, try to fill in all the fields correctly.\"\n    }, {\n      status: 400\n    });\n  }\n  const existingUser = await db.user.findUnique({\n    where: {\n      email\n    }\n  });\n  if (existingUser) {\n    return json({\n      error: \"Are you sure you don't already have an account with this email?.\"\n    }, {\n      status: 400\n    });\n  }\n  const hashedPassword = await bcrypt.hash(password, 10);\n  // G\u00E9n\u00E9rer un token de confirmation\n  const confirmationToken = randomUUID();\n\n  // Cr\u00E9er l'utilisateur avec le token et marquer email non confirm\u00E9\n  await db.user.create({\n    data: {\n      email,\n      username,\n      password: hashedPassword,\n      emailConfirmed: false,\n      confirmationToken\n    }\n  });\n\n  // Envoyer l'e-mail de confirmation\n  await sendConfirmationEmail(email, confirmationToken);\n\n  // Rediriger vers la page invitant \u00E0 v\u00E9rifier la bo\u00EEte mail\n  return redirect(\"/check-email\");\n};\nexport default function SignupPage() {\n  _s();\n  const actionData = useActionData();\n  return <div className=\"min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-sky-400 to-sky-600 p-4\">\n      <h1 className=\"text-4xl font-extrabold text-white mb-6 drop-shadow-lg\">\n        Join the Adventure!\n      </h1>\n      <Form method=\"post\" className=\"w-full max-w-md bg-yellow-200 p-8 rounded-3xl shadow-xl border-4 border-yellow-500\">\n        {actionData?.error ? <div className=\"mb-4 text-red-600 font-bold\">{actionData.error}</div> : null}\n        <div className=\"mb-4\">\n          <label htmlFor=\"username\" className=\"block text-lg font-semibold text-gray-700 mb-1\">\n            Username\n          </label>\n          <input type=\"text\" name=\"username\" id=\"username\" required className=\"w-full p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-red-500\" />\n        </div>\n        <div className=\"mb-4\">\n          <label htmlFor=\"email\" className=\"block text-lg font-semibold text-gray-700 mb-1\">\n            Email\n          </label>\n          <input type=\"email\" name=\"email\" id=\"email\" required className=\"w-full p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-red-500\" />\n        </div>\n        <div className=\"mb-6\">\n          <label htmlFor=\"password\" className=\"block text-lg font-semibold text-gray-700 mb-1\">\n            Password\n          </label>\n          <input type=\"password\" name=\"password\" id=\"password\" required className=\"w-full p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-red-500\" />\n        </div>\n        <button type=\"submit\" className=\"w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-full shadow-xl transform hover:scale-105 transition\">\n          Start\n        </button>\n      </Form>\n      <p className=\"mt-4 text-white\">\n        Already on board?{\" \"}\n        <Link to=\"/login\" className=\"text-blue-200 underline font-semibold\">\n          Log in\n        </Link>\n      </p>\n    </div>;\n}\n_s(SignupPage, \"fHVw5pq0Zwd2gXh2gyrnVdHnLCc=\", false, function () {\n  return [useActionData];\n});\n_c = SignupPage;\nvar _c;\n$RefreshReg$(_c, \"SignupPage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACsBlB,kBAA+B;AAG/B,gBAAmB;AAEnB,mBAAsC;AAqDhC;AA/EN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4BAA8B,EAAE;AAAA,EACzE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAuB;AACvB,cAAY,IAAI,eAAe;AACjC;AA0De,SAAR,aAA8B;AACnC,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,SAAO,mDAAC,SAAI,WAAU,wGAClB;AAAA,uDAAC,QAAG,WAAU,0DAAyD,mCAAvE;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,mDAAC,QAAK,QAAO,QAAO,WAAU,sFAC3B;AAAA,kBAAY,QAAQ,mDAAC,SAAI,WAAU,+BAA+B,qBAAW,SAAzD;AAAA;AAAA;AAAA;AAAA,aAA+D,IAAS;AAAA,MAC7F,mDAAC,SAAI,WAAU,QACb;AAAA,2DAAC,WAAM,SAAQ,YAAW,WAAU,kDAAiD,wBAArF;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,mDAAC,WAAM,MAAK,QAAO,MAAK,YAAW,IAAG,YAAW,UAAQ,MAAC,WAAU,uGAApE;AAAA;AAAA;AAAA;AAAA,eAAwK;AAAA,WAJ1K;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MACA,mDAAC,SAAI,WAAU,QACb;AAAA,2DAAC,WAAM,SAAQ,SAAQ,WAAU,kDAAiD,qBAAlF;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,mDAAC,WAAM,MAAK,SAAQ,MAAK,SAAQ,IAAG,SAAQ,UAAQ,MAAC,WAAU,uGAA/D;AAAA;AAAA;AAAA;AAAA,eAAmK;AAAA,WAJrK;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MACA,mDAAC,SAAI,WAAU,QACb;AAAA,2DAAC,WAAM,SAAQ,YAAW,WAAU,kDAAiD,wBAArF;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,mDAAC,WAAM,MAAK,YAAW,MAAK,YAAW,IAAG,YAAW,UAAQ,MAAC,WAAU,uGAAxE;AAAA;AAAA;AAAA;AAAA,eAA4K;AAAA,WAJ9K;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MACA,mDAAC,YAAO,MAAK,UAAS,WAAU,iIAAgI,qBAAhK;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAtBF;AAAA;AAAA;AAAA;AAAA,WAuBA;AAAA,IACA,mDAAC,OAAE,WAAU,mBAAkB;AAAA;AAAA,MACX;AAAA,MAClB,mDAAC,QAAK,IAAG,UAAS,WAAU,yCAAwC,sBAApE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAJF;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,OAjCG;AAAA;AAAA;AAAA;AAAA,SAkCL;AACJ;AACA,GAAG,YAAY,gCAAgC,OAAO,WAAY;AAChE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,YAAY;AAE7B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
