{
  "version": 3,
  "sources": ["../../../app/routes/confirm.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/confirm.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/confirm.tsx\");\n  import.meta.hot.lastModified = \"1740143152601.002\";\n}\n// REMIX HMR END\n\n// app/routes/confirm.tsx\nimport { redirect } from \"@remix-run/node\";\nimport { db } from \"~/utils/db.server\";\nexport const loader = async ({\n  request\n}) => {\n  const url = new URL(request.url);\n  const token = url.searchParams.get(\"token\");\n  if (!token) {\n    throw new Response(\"Token manquant\", {\n      status: 400\n    });\n  }\n  const user = await db.user.findFirst({\n    where: {\n      confirmationToken: token\n    }\n  });\n  if (!user) {\n    throw new Response(\"Token invalide ou expir\u00E9\", {\n      status: 400\n    });\n  }\n\n  // Mettre \u00E0 jour l'utilisateur pour marquer l'e-mail comme confirm\u00E9\n  await db.user.update({\n    where: {\n      id: user.id\n    },\n    data: {\n      emailConfirmed: true,\n      confirmationToken: null\n    }\n  });\n\n  // Rediriger vers la page de connexion ou une page de confirmation\n  return redirect(\"/login?confirmed=1\");\n};\nexport default function Confirm() {\n  return <p>Confirmation ongoing\u2026</p>;\n}\n_c = Confirm;\nvar _c;\n$RefreshReg$(_c, \"Confirm\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAqBA,kBAAyB;AACzB,gBAAmB;AAqCV;AA1DT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,6BAA+B,EAAE;AAAA,EAC1E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAwB;AACxB,cAAY,IAAI,eAAe;AACjC;AAyCe,SAAR,UAA2B;AAChC,SAAO,mDAAC,OAAE,0CAAH;AAAA;AAAA;AAAA;AAAA,SAAwB;AACjC;AACA,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,SAAS;AAE1B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
