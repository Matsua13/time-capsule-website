{
  "version": 3,
  "sources": ["../../../app/routes/new.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/new.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/new.tsx\");\n  import.meta.hot.lastModified = \"1740079377228.2295\";\n}\n// REMIX HMR END\n\n// app/routes/capsule/new.tsx\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Form, useActionData, useNavigation } from \"@remix-run/react\";\nimport { json, redirect } from \"@remix-run/node\";\n// eslint-disable-next-line import/no-unresolved\nimport { requireUser } from \"~/utils/auth.server\";\n// eslint-disable-next-line import/no-unresolved\nimport { db } from \"~/utils/db.server\";\nimport { useState } from \"react\";\nimport { promises as fs } from \"fs\";\nimport path from \"path\";\n\n// Le loader s'assure que l'utilisateur est connect\u00E9\nexport const loader = async ({\n  request\n}) => {\n  await requireUser(request);\n  return json({});\n};\n\n// L'action r\u00E9cup\u00E8re les donn\u00E9es du formulaire, les valide et cr\u00E9e la capsule\nexport const action = async ({\n  request\n}) => {\n  // On s'assure que l'utilisateur est connect\u00E9\n  const user = await requireUser(request);\n  const formData = await request.formData();\n  const title = formData.get(\"title\");\n  const content = formData.get(\"content\");\n  const scheduledDate = formData.get(\"scheduledDate\");\n  const visibility = formData.get(\"visibility\");\n\n  // Validation minimale\n  if (typeof title !== \"string\" || title.trim() === \"\") {\n    return json({\n      error: \"Please, choose a name for your capsule.\"\n    }, {\n      status: 400\n    });\n  }\n  if (typeof content !== \"string\" || content.trim() === \"\") {\n    return json({\n      error: \"Please, put some content.\"\n    }, {\n      status: 400\n    });\n  }\n  if (typeof scheduledDate !== \"string\" || scheduledDate.trim() === \"\") {\n    return json({\n      error: \"Please, choose the opening day.\"\n    }, {\n      status: 400\n    });\n  }\n  if (typeof visibility !== \"string\") {\n    return json({\n      error: \"Please, choose the visibility.\"\n    }, {\n      status: 400\n    });\n  }\n\n  // Gestion de l'option Groupe\n  let groupRecipient = null;\n  let recipientType = null;\n  let recipientUser = null;\n  if (visibility === \"group\") {\n    const groupChoice = formData.get(\"groupChoice\");\n    if (groupChoice === \"username\") {\n      groupRecipient = formData.get(\"groupUsername\");\n      recipientType = \"username\";\n    } else if (groupChoice === \"email\") {\n      groupRecipient = formData.get(\"groupEmail\");\n      recipientType = \"email\";\n    }\n    if (!groupRecipient || groupRecipient.trim() === \"\") {\n      return json({\n        error: \"Please enter the username or email of the recipient\"\n      }, {\n        status: 400\n      });\n    }\n    if (recipientType === \"email\") {\n      recipientUser = await db.user.findUnique({\n        where: {\n          email: groupRecipient.trim()\n        }\n      });\n    } else if (recipientType === \"username\") {\n      recipientUser = await db.user.findFirst({\n        where: {\n          username: groupRecipient.trim()\n        }\n      });\n    }\n    console.log(\"Recipient user:\", recipientUser);\n\n    // V\u00E9rifier que le destinataire n'est pas l'utilisateur qui envoie la capsule\n    if (recipientUser && recipientUser.id === user.id) {\n      recipientUser = null;\n    }\n  }\n\n  // Cr\u00E9ation de la capsule dans la base de donn\u00E9es et association \u00E0 l'utilisateur connect\u00E9\n  const capsuleData = {\n    ownerId: user.id,\n    title: title.trim(),\n    content: content.trim(),\n    scheduledDate: new Date(scheduledDate),\n    visibility,\n    groupRecipient: visibility === \"group\" ? groupRecipient.trim() : null,\n    recipientType: visibility === \"group\" ? recipientType : null\n  };\n  const capsule = await db.capsule.create({\n    data: capsuleData\n  });\n\n  // Si la capsule est de type group et qu'un destinataire a \u00E9t\u00E9 trouv\u00E9,\n  // on cr\u00E9e une notification en incluant l'ID de la capsule dans le message.\n  if (visibility === \"group\" && recipientUser && recipientUser.id !== user.id) {\n    const notificationMessage = `capsule:${capsule.id}: someone's thinking about you!`;\n    await db.notification.create({\n      data: {\n        userId: recipientUser.id,\n        message: notificationMessage\n      }\n    });\n    console.log(\"Notification created for user\", recipientUser.id);\n  }\n\n  // Gestion facultative du media\n  const mediaFile = formData.get(\"mediaFile\");\n  if (mediaFile && mediaFile.size > 0) {\n    // Lis le contenu du fichier sous forme de Buffer\n    const arrayBuffer = await mediaFile.arrayBuffer();\n    const buffer = Buffer.from(arrayBuffer);\n\n    // Cr\u00E9e un nom de fichier unique (ici avec Date.now() + le nom original)\n    const filename = `${Date.now()}-${mediaFile.name}`;\n\n    // D\u00E9termine le chemin o\u00F9 sauvegarder le fichier (ex.: public/uploads)\n    const uploadDir = path.join(process.cwd(), \"public\", \"uploads\");\n    const filePath = path.join(uploadDir, filename);\n\n    // Assure-toi que le dossier existe (sinon, cr\u00E9e-le)\n    await fs.mkdir(uploadDir, {\n      recursive: true\n    });\n\n    // Sauvegarde le fichier sur le disque\n    await fs.writeFile(filePath, buffer);\n\n    // D\u00E9termine le type de m\u00E9dia en fonction du type MIME\n    let mediaType = \"file\";\n    if (mediaFile.type.startsWith(\"image/\")) {\n      mediaType = \"image\";\n    } else if (mediaFile.type.startsWith(\"video/\")) {\n      mediaType = \"video\";\n    } else if (mediaFile.type.startsWith(\"audio/\")) {\n      mediaType = \"audio\";\n    }\n\n    // Enregistre le m\u00E9dia en base de donn\u00E9es\n    await db.media.create({\n      data: {\n        capsule: {\n          connect: {\n            id: capsule.id\n          }\n        },\n        type: mediaType,\n        // L'URL est ici le chemin relatif vers le fichier\n        url: `/uploads/${filename}`\n      }\n    });\n  }\n\n  // Redirection vers la page de d\u00E9tail de la capsule cr\u00E9\u00E9e\n  return redirect(`/${capsule.id}`);\n};\nexport default function NewCapsule() {\n  _s();\n  const actionData = useActionData();\n  const transition = useNavigation();\n\n  // \u00C9tats pour g\u00E9rer l'affichage conditionnel\n  const [selectedVisibility, setSelectedVisibility] = useState(\"private\");\n  const [groupChoice, setGroupChoice] = useState(\"\");\n\n  // Confirmation avant soumission\n  const handleSubmit = event => {\n    const confirmed = window.confirm(\"Warning: Once created, the capsule cannot be modified. This is deliberate, to encourage you to be yourself: the idea is to be in the present. The editable draft option will come later for those who need more reflection.\");\n    if (!confirmed) {\n      event.preventDefault();\n    }\n  };\n  return <div className=\"min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-sky-400 to-sky-600 p-4\">\n      <h1 className=\"text-4xl font-extrabold text-white mb-6 drop-shadow-lg\">\n        Create a new Capsule\n      </h1>\n      <Form method=\"post\" encType=\"multipart/form-data\" onSubmit={handleSubmit} className=\"w-full max-w-md bg-yellow-200 p-8 rounded-3xl shadow-xl border-4 border-yellow-500\">\n        {actionData?.error && <div className=\"mb-4 text-red-600 font-bold\">{actionData.error}</div>}\n        <label className=\"block mb-4\">\n          Capsule Name:\n          <input type=\"text\" name=\"title\" required className=\"mt-1 block w-full p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-red-500\" />\n        </label>\n        <label className=\"block mb-4\">\n          Your thoughts:\n          <textarea name=\"content\" required className=\"mt-1 block w-full p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-red-500\" />\n        </label>\n        <label className=\"block mb-4\">\n          Opening Day:\n          <input type=\"datetime-local\" name=\"scheduledDate\" required className=\"mt-1 block w-full p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-red-500\" />\n        </label>\n        <label className=\"block mb-4\">\n          Visibility:\n          <select name=\"visibility\" required onChange={e => {\n          setSelectedVisibility(e.target.value);\n          if (e.target.value !== \"group\") {\n            setGroupChoice(\"\");\n          }\n        }} className=\"mt-1 block w-full p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-red-500\">\n            <option value=\"private\">Private</option>\n            <option value=\"public\">Public</option>\n            <option value=\"group\">Group</option>\n          </select>\n        </label>\n        {/* Section pour le cas \"Group\" */}\n        {selectedVisibility === \"group\" && <fieldset className=\"mb-4 border border-gray-300 p-4 rounded\">\n            <legend className=\"text-lg font-semibold mb-2\">\n              How do you want to send the Capsule?\n            </legend>\n            <div className=\"mb-2\">\n              <label className=\"inline-flex items-center\">\n                <input type=\"radio\" name=\"groupChoice\" value=\"username\" onChange={e => setGroupChoice(e.target.value)} className=\"mr-2\" required />\n                Via username\n              </label>\n            </div>\n            <div className=\"mb-2\">\n              <label className=\"inline-flex items-center\">\n                <input type=\"radio\" name=\"groupChoice\" value=\"email\" onChange={e => setGroupChoice(e.target.value)} className=\"mr-2\" required />\n                Via email\n              </label>\n            </div>\n            {groupChoice === \"username\" && <label className=\"block mt-2\">\n                Recipient username:\n                <input type=\"text\" name=\"groupUsername\" required className=\"mt-1 block w-full p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-red-500\" />\n              </label>}\n            {groupChoice === \"email\" && <label className=\"block mt-2\">\n                Recipient email:\n                <input type=\"email\" name=\"groupEmail\" required className=\"mt-1 block w-full p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-red-500\" />\n              </label>}\n          </fieldset>}\n        {/* Section pour ajouter un media */}\n        <fieldset className=\"mb-4 border border-gray-300 p-4 rounded\">\n          <legend className=\"text-lg font-semibold\">\n            Add a gift\n          </legend>\n          <label className=\"block mb-2\">\n            Select a media type:\n            <input type=\"file\" name=\"mediaFile\" accept=\"image/*,video/*,audio/*\" className=\"mt-1 block w-full p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-red-500\" />\n  </label>\n      </fieldset>\n        <button type=\"submit\" disabled={transition.state === \"submitting\"} className=\"w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-full shadow-xl transform hover:scale-105 transition\">\n          {transition.state === \"submitting\" ? \"Creation ongoing...\" : \"Let's create the magic capsule!\"}\n        </button>\n      </Form>\n    </div>;\n}\n_s(NewCapsule, \"lBC1p2b/6cR357LRhxtOEqhOBrQ=\", false, function () {\n  return [useActionData, useNavigation];\n});\n_c = NewCapsule;\nvar _c;\n$RefreshReg$(_c, \"NewCapsule\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
